/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package proyecto1;

import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.StringReader;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import statpy.Lexer;
import statpy.Parser;
import tokens.token;
import errores.error;
import java.io.BufferedWriter;

/**
 *
 * @author USER
 */
public class From extends javax.swing.JFrame {
    

    /**
     * Creates new form From
     */
    public From() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        entrada = new java.awt.TextArea();
        textField1 = new java.awt.TextField();
        ejecutar = new java.awt.Button();
        label1 = new java.awt.Label();
        textArea1 = new java.awt.TextArea();
        textArea2 = new java.awt.TextArea();
        jMenuBar2 = new javax.swing.JMenuBar();
        archivo = new javax.swing.JMenu();
        abrirarchivo = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        guardarcomo = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        rtokens = new javax.swing.JMenuItem();
        rerrores = new javax.swing.JMenuItem();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(51, 0, 0));

        textField1.setBackground(new java.awt.Color(153, 153, 153));

        ejecutar.setBackground(new java.awt.Color(0, 0, 102));
        ejecutar.setFont(new java.awt.Font("Ebrima", 0, 14)); // NOI18N
        ejecutar.setForeground(new java.awt.Color(255, 255, 255));
        ejecutar.setLabel("EJECUTAR");
        ejecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ejecutarActionPerformed(evt);
            }
        });

        label1.setText("COMPILADORES 1 - PROYECTO 1");

        jMenuBar2.setBackground(new java.awt.Color(0, 0, 102));

        archivo.setForeground(new java.awt.Color(255, 255, 255));
        archivo.setText("ARCHIVO");

        abrirarchivo.setText("ABRIR ARCHIVO");
        abrirarchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirarchivoActionPerformed(evt);
            }
        });
        archivo.add(abrirarchivo);

        jMenuItem1.setText("GUARDAR");
        archivo.add(jMenuItem1);

        guardarcomo.setText("GUARDAR COMO");
        guardarcomo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarcomoActionPerformed(evt);
            }
        });
        archivo.add(guardarcomo);

        jMenuBar2.add(archivo);

        jMenu4.setBackground(new java.awt.Color(255, 255, 255));
        jMenu4.setForeground(new java.awt.Color(255, 255, 255));
        jMenu4.setText("REPORTES");

        rtokens.setText("REPORTE DE TOKENS");
        rtokens.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rtokensActionPerformed(evt);
            }
        });
        jMenu4.add(rtokens);

        rerrores.setText("REPORTE DE ERRORES");
        rerrores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rerroresActionPerformed(evt);
            }
        });
        jMenu4.add(rerrores);

        jMenuBar2.add(jMenu4);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(textField1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(entrada, javax.swing.GroupLayout.DEFAULT_SIZE, 481, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(177, 177, 177)
                        .addComponent(ejecutar, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 151, Short.MAX_VALUE)
                        .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(textArea2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textArea1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ejecutar, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(textArea1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(entrada, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(textField1, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                    .addComponent(textArea2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ejecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ejecutarActionPerformed
                // TODO add your handling code here:
        
            String texto = this.entrada.getText();
            Lexer analizadorLexico = new Lexer(new BufferedReader(new StringReader(texto)));
            
            Parser analizador_sintac = new Parser(analizadorLexico);
           try {
               analizador_sintac.parse();
           } catch (Exception ex) {
               System.out.println("Error al compilar");
               System.out.println(ex);
           }
            
            System.out.println("se hizo clic en ejecutar"+texto);
    }//GEN-LAST:event_ejecutarActionPerformed

    private void abrirarchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirarchivoActionPerformed
        JFileChooser archivo = new JFileChooser();
        int seleccion = archivo.showOpenDialog(null);
        
        if (seleccion == JFileChooser.APPROVE_OPTION) {
            // Obtiene el archivo seleccionado
            File selectedFile = archivo.getSelectedFile();
            
            try {
                BufferedReader reader = new BufferedReader(new FileReader(selectedFile));
                StringBuilder contenido = new StringBuilder();
                String line;

                while ((line = reader.readLine()) != null) {
                    contenido.append(line).append("\n");
                }

                reader.close();

                String contenidoArchivo = contenido.toString();

                System.out.println("Contenido del archivo:\n" + contenidoArchivo);
                entrada.setText(contenidoArchivo);
                ejecutar.setEnabled(true);
                
            } catch (IOException e) {
                e.printStackTrace();
            }
            
        }
    }//GEN-LAST:event_abrirarchivoActionPerformed

    private void rtokensActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rtokensActionPerformed
        
    String filename = "lexico_reporte.html";

    // Genera el informe HTML
    StringBuilder htmlContent = new StringBuilder();
    htmlContent.append("<!DOCTYPE html>\n")
               .append("<html lang=\"es\">\n")
               .append("<head>\n")
               .append("    <meta charset=\"UTF-8\">\n")
               .append("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n")
               .append("    <style>\n")
               .append("        body { font-family: Arial, sans-serif; }\n")
               .append("        .tabla { width: 80%; margin: 20px auto; border-collapse: collapse; }\n")
               .append("        .tabla th, .tabla td { border: 1px solid #dddddd; padding: 8px; text-align: left; }\n")
               .append("        .tabla th { background-color: #f2f2f2; }\n")
               .append("    </style>\n")
               .append("    <title>REPORTE DE TOKENS</title>\n")
               .append("</head>\n")
               .append("<body>\n")
               .append("    <table class=\"tabla\">\n")
               .append("        <tr>\n")
               .append("            <th>Lexema</th>\n")
               .append("            <th>Descripción</th>\n")
               .append("            <th>Línea</th>\n")
               .append("            <th>Columna</th>\n")
               .append("        </tr>");

    if (Lexer.lista_tokens.isEmpty()) {
        JOptionPane.showMessageDialog(null, "No existen errores lexicos", "Éxito", JOptionPane.INFORMATION_MESSAGE);
    } else {
        for (token error : Lexer.lista_tokens) {
            htmlContent.append("        <tr>\n")
                       .append("            <td>").append(error.getLexema()).append("</td>")
                       .append("            <td>").append(error.getDescripcion()).append("</td>")
                       .append("            <td>").append(error.getLinea()).append("</td>")
                       .append("            <td>").append(error.getColumna()).append("</td>")
                       .append("        </tr>\n");

            System.out.println(error.getLexema() + "| " + error.getDescripcion() + "| " + error.getLinea() + "| " + error.getColumna());
        }
    }
    
    htmlContent.append("    </table>\n")
               .append("</body>\n")
               .append("</html>");

    try {
        FileWriter writer = new FileWriter(filename);
        writer.write(htmlContent.toString());
        writer.close();
        JOptionPane.showMessageDialog(null, "El archivo HTML ha sido creado exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);

        // Abre el archivo HTML en el navegador
        Desktop.getDesktop().browse(new File(filename).toURI());
    } catch (IOException e) {
        e.printStackTrace();
    }
    }//GEN-LAST:event_rtokensActionPerformed

    private void rerroresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rerroresActionPerformed
      String filenameErrores = "errores_reporte.html";

// Genera el informe de errores HTML
StringBuilder htmlErroresContent = new StringBuilder();
htmlErroresContent.append("<!DOCTYPE html>\n")
                 .append("<html lang=\"es\">\n")
                 .append("<head>\n")
                 .append("    <meta charset=\"UTF-8\">\n")
                 .append("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n")
                 .append("    <style>\n")
                 .append("        body { font-family: Arial, sans-serif; }\n")
                 .append("        .tabla { width: 80%; margin: 20px auto; border-collapse: collapse; }\n")
                 .append("        .tabla th, .tabla td { border: 1px solid #dddddd; padding: 8px; text-align: left; }\n")
                 .append("        .tabla th { background-color: #f2f2f2; }\n")
                 .append("    </style>\n")
                 .append("    <title>REPORTE DE ERRORES LÉXICOS</title>\n")
                 .append("</head>\n")
                 .append("<body>\n")
                 .append("    <table class=\"tabla\">\n")
                 .append("        <tr>\n")
                 .append("            <th>Lexema</th>\n")
                 .append("            <th>Descripción</th>\n")
                 .append("            <th>Línea</th>\n")
                 .append("            <th>Columna</th>\n")
                 .append("        </tr>");

if (Lexer.lista_errores.isEmpty()) {
    JOptionPane.showMessageDialog(null, "No existen errores léxicos", "Éxito", JOptionPane.INFORMATION_MESSAGE);
} else {
    for (error error : Lexer.lista_errores) {
        htmlErroresContent.append("        <tr>\n")
                          .append("            <td>").append(error.getTipo()).append("</td>")
                          .append("            <td>").append(error.getDescripcion()).append("</td>")
                          .append("            <td>").append(error.getLinea()).append("</td>")
                          .append("            <td>").append(error.getColumna()).append("</td>")
                          .append("        </tr>\n");

        System.out.println(error.getTipo() + "| " + error.getDescripcion() + "| " + error.getLinea() + "| " + error.getColumna());
    }
}

htmlErroresContent.append("    </table>\n")
                 .append("</body>\n")
                 .append("</html>");

try {
    FileWriter writerErrores = new FileWriter(filenameErrores);
    writerErrores.write(htmlErroresContent.toString());
    writerErrores.close();
    JOptionPane.showMessageDialog(null, "El archivo HTML de errores ha sido creado exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);

    // Abre el archivo HTML de errores en el navegador
    Desktop.getDesktop().browse(new File(filenameErrores).toURI());
} catch (IOException e) {
    e.printStackTrace();
}

    }//GEN-LAST:event_rerroresActionPerformed

    private void guardarcomoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarcomoActionPerformed
                JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Guardar como...");

        int userSelection = fileChooser.showSaveDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();

            try (BufferedWriter writer = new BufferedWriter(new FileWriter(fileToSave))) {
                writer.write(entrada.getText());
                JOptionPane.showMessageDialog(this, "Archivo guardado exitosamente", "Guardar", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Error al guardar el archivo", "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_guardarcomoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(From.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(From.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(From.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(From.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new From().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem abrirarchivo;
    private javax.swing.JMenu archivo;
    private java.awt.Button ejecutar;
    private java.awt.TextArea entrada;
    private javax.swing.JMenuItem guardarcomo;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private java.awt.Label label1;
    private javax.swing.JMenuItem rerrores;
    private javax.swing.JMenuItem rtokens;
    private java.awt.TextArea textArea1;
    private java.awt.TextArea textArea2;
    private java.awt.TextField textField1;
    // End of variables declaration//GEN-END:variables
}
